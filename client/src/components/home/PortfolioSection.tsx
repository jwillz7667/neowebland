import { useEffect, useRef, useState } from "react"
import { motion, useInView } from "framer-motion"
import { Sparkles, Download, Eye, Wand2, Palette, Code, Zap, Clock, DollarSign } from "lucide-react"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { generateWebsiteMockup, getProjectQuote } from "@/api/mockup"
import { useToast } from "@/hooks/useToast"

export function PortfolioSection() {
  const ref = useRef(null)
  const isInView = useInView(ref, { once: true, margin: "-100px" })
  const [isGeneratorOpen, setIsGeneratorOpen] = useState(false)
  const [mockupData, setMockupData] = useState<any>(null)
  const [loading, setLoading] = useState(false)
  const [quoteLoading, setQuoteLoading] = useState(false)
  const [quote, setQuote] = useState<any>(null)
  const { toast } = useToast()

  const [formData, setFormData] = useState({
    companyName: "",
    industry: "",
    description: "",
    targetAudience: "",
    preferredColors: "",
    websiteType: "",
    features: ""
  })

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const generateMockup = async () => {
    if (!formData.companyName || !formData.industry || !formData.description) {
      toast({
        title: "Error",
        description: "Please fill in company name, industry, and description",
        variant: "destructive",
      })
      return
    }

    try {
      setLoading(true)
      const mockup = await generateWebsiteMockup(formData)
      setMockupData(mockup)
      toast({
        title: "Success",
        description: "AI-powered website mockup generated successfully!",
      })
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  const generateQuote = async () => {
    if (!mockupData) return

    try {
      setQuoteLoading(true)
      const quoteData = await getProjectQuote({
        ...formData,
        mockup: mockupData
      })
      setQuote(quoteData)
      toast({
        title: "Success",
        description: "Professional quote generated by AI!",
      })
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setQuoteLoading(false)
    }
  }

  const resetGenerator = () => {
    setFormData({
      companyName: "",
      industry: "",
      description: "",
      targetAudience: "",
      preferredColors: "",
      websiteType: "",
      features: ""
    })
    setMockupData(null)
    setQuote(null)
  }

  return (
    <section id="portfolio" className="py-16 px-6 relative overflow-hidden">
      <div className="absolute inset-0 bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50 dark:from-slate-800 dark:via-purple-900/20 dark:to-slate-800" />

      <div className="relative z-10 max-w-7xl mx-auto">
        <motion.div
          ref={ref}
          initial={{ opacity: 0, y: 50 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8 }}
          className="text-center mb-12"
        >
          <Badge variant="secondary" className="mb-4 px-4 py-2">
            <Sparkles className="w-4 h-4 mr-2" />
            Powered by Google Gemini 2.0
          </Badge>
          <h2 className="text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-slate-900 to-slate-600 dark:from-white dark:to-slate-300 bg-clip-text text-transparent">
            AI Website Mockup Generator
          </h2>
          <p className="text-xl text-slate-600 dark:text-slate-400 max-w-3xl mx-auto">
            Get professional, industry-specific website mockups and accurate development quotes powered by cutting-edge AI
          </p>

          <div className="mt-8">
            <Dialog open={isGeneratorOpen} onOpenChange={setIsGeneratorOpen}>
              <DialogTrigger asChild>
                <Button className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-8 py-4 rounded-full text-lg shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300">
                  <Wand2 className="w-6 h-6 mr-3" />
                  Generate Professional Mockup
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-7xl max-h-[95vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle className="text-3xl bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                    AI-Powered Website Mockup Generator
                  </DialogTitle>
                </DialogHeader>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  {/* Form Section */}
                  <div className="space-y-6">
                    <div className="bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-700 rounded-xl p-6">
                      <h3 className="text-xl font-semibold mb-4 flex items-center">
                        <Code className="w-5 h-5 mr-2" />
                        Company Information
                      </h3>

                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-medium mb-2">Company Name *</label>
                          <Input
                            value={formData.companyName}
                            onChange={(e) => handleInputChange("companyName", e.target.value)}
                            placeholder="Enter your company name"
                            className="bg-white dark:bg-slate-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium mb-2">Industry *</label>
                          <Select value={formData.industry} onValueChange={(value) => handleInputChange("industry", value)}>
                            <SelectTrigger className="bg-white dark:bg-slate-900">
                              <SelectValue placeholder="Select your industry" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="technology">Technology & Software</SelectItem>
                              <SelectItem value="healthcare">Healthcare & Medical</SelectItem>
                              <SelectItem value="finance">Finance & Banking</SelectItem>
                              <SelectItem value="retail">Retail & E-commerce</SelectItem>
                              <SelectItem value="education">Education & Training</SelectItem>
                              <SelectItem value="restaurant">Restaurant & Food</SelectItem>
                              <SelectItem value="real-estate">Real Estate</SelectItem>
                              <SelectItem value="consulting">Consulting & Services</SelectItem>
                              <SelectItem value="manufacturing">Manufacturing</SelectItem>
                              <SelectItem value="nonprofit">Non-profit</SelectItem>
                              <SelectItem value="other">Other</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div>
                          <label className="block text-sm font-medium mb-2">Business Description *</label>
                          <Textarea
                            value={formData.description}
                            onChange={(e) => handleInputChange("description", e.target.value)}
                            placeholder="Describe what your business does, your unique value proposition, and key services..."
                            rows={4}
                            className="bg-white dark:bg-slate-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium mb-2">Target Audience</label>
                          <Input
                            value={formData.targetAudience}
                            onChange={(e) => handleInputChange("targetAudience", e.target.value)}
                            placeholder="Who are your ideal customers? (e.g., small businesses, millennials, professionals)"
                            className="bg-white dark:bg-slate-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium mb-2">Website Type</label>
                          <Select value={formData.websiteType} onValueChange={(value) => handleInputChange("websiteType", value)}>
                            <SelectTrigger className="bg-white dark:bg-slate-900">
                              <SelectValue placeholder="Select website type" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="business">Business Website</SelectItem>
                              <SelectItem value="ecommerce">E-commerce Store</SelectItem>
                              <SelectItem value="portfolio">Portfolio Website</SelectItem>
                              <SelectItem value="blog">Blog/Content Site</SelectItem>
                              <SelectItem value="landing">Landing Page</SelectItem>
                              <SelectItem value="saas">SaaS Platform</SelectItem>
                              <SelectItem value="marketplace">Marketplace</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div>
                          <label className="block text-sm font-medium mb-2">Brand Colors & Style</label>
                          <Input
                            value={formData.preferredColors}
                            onChange={(e) => handleInputChange("preferredColors", e.target.value)}
                            placeholder="e.g., Modern blue and white, Warm earth tones, Minimalist black and gold"
                            className="bg-white dark:bg-slate-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium mb-2">Desired Features</label>
                          <Textarea
                            value={formData.features}
                            onChange={(e) => handleInputChange("features", e.target.value)}
                            placeholder="Contact forms, online booking, payment processing, user accounts, live chat, blog, etc."
                            rows={3}
                            className="bg-white dark:bg-slate-900"
                          />
                        </div>
                      </div>
                    </div>

                    <div className="flex gap-4">
                      <Button
                        onClick={generateMockup}
                        disabled={loading}
                        className="flex-1 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 py-3 text-lg"
                      >
                        {loading ? (
                          <>
                            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                            AI is Creating...
                          </>
                        ) : (
                          <>
                            <Sparkles className="w-5 h-5 mr-2" />
                            Generate AI Mockup
                          </>
                        )}
                      </Button>
                      <Button variant="outline" onClick={resetGenerator} className="px-6">
                        Reset
                      </Button>
                    </div>
                  </div>

                  {/* Preview Section */}
                  <div className="space-y-6">
                    {mockupData ? (
                      <div className="space-y-6">
                        <Tabs defaultValue="mockup" className="w-full">
                          <TabsList className="grid w-full grid-cols-3">
                            <TabsTrigger value="mockup">Mockup</TabsTrigger>
                            <TabsTrigger value="design">Design</TabsTrigger>
                            <TabsTrigger value="features">Features</TabsTrigger>
                          </TabsList>

                          <TabsContent value="mockup" className="space-y-4">
                            <div className="bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-700 rounded-xl p-6">
                              <h3 className="text-xl font-semibold mb-4 flex items-center">
                                <Eye className="w-5 h-5 mr-2" />
                                Professional Website Mockup
                              </h3>

                              {/* Advanced Mockup Preview */}
                              <div className="bg-white dark:bg-slate-900 rounded-lg p-4 border-2 border-slate-200 dark:border-slate-600 mb-4 shadow-lg">
                                <div className="space-y-4">
                                  {/* Browser Header */}
                                  <div className="flex items-center justify-between p-3 bg-slate-100 dark:bg-slate-800 rounded">
                                    <div className="flex items-center space-x-2">
                                      <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                                      <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                                      <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                                    </div>
                                    <div className="text-xs text-slate-500">{formData.companyName}.com</div>
                                  </div>

                                  {/* Header Section */}
                                  <div className="space-y-3">
                                    <div className="h-12 bg-gradient-to-r from-purple-200 to-blue-200 dark:from-purple-800 dark:to-blue-800 rounded flex items-center justify-between px-4">
                                      <div className="text-sm font-bold">{mockupData.header?.logo || formData.companyName}</div>
                                      <div className="flex space-x-3">
                                        {mockupData.header?.navigation?.map((item: string, index: number) => (
                                          <div key={index} className="text-xs px-2 py-1 bg-white/20 rounded">{item}</div>
                                        ))}
                                      </div>
                                    </div>

                                    {/* Hero Section */}
                                    <div className="h-40 bg-gradient-to-br from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-600 rounded flex items-center justify-center p-6">
                                      <div className="text-center">
                                        <div className="text-lg font-bold mb-2">{mockupData.hero?.title || "Welcome to " + formData.companyName}</div>
                                        <div className="text-sm text-slate-600 dark:text-slate-400 mb-3">{mockupData.hero?.subtitle || "Professional solutions for your business"}</div>
                                        <div className="inline-block px-4 py-2 bg-blue-500 text-white text-xs rounded">{mockupData.hero?.cta || "Get Started"}</div>
                                      </div>
                                    </div>

                                    {/* Sections Grid */}
                                    <div className="grid grid-cols-2 gap-3">
                                      {mockupData.sections?.slice(0, 4).map((section: any, index: number) => (
                                        <div key={index} className="h-20 bg-slate-100 dark:bg-slate-700 rounded flex items-center justify-center p-3">
                                          <div className="text-center">
                                            <div className="text-xs font-medium mb-1">{section.name}</div>
                                            <div className="text-xs text-slate-500 truncate">{section.content?.substring(0, 30)}...</div>
                                          </div>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </TabsContent>

                          <TabsContent value="design" className="space-y-4">
                            <div className="bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-700 rounded-xl p-6">
                              <h3 className="text-xl font-semibold mb-4 flex items-center">
                                <Palette className="w-5 h-5 mr-2" />
                                Design System
                              </h3>

                              {mockupData.designSystem && (
                                <div className="space-y-4">
                                  {/* Color Palette */}
                                  <div>
                                    <h4 className="font-medium mb-2">Color Palette</h4>
                                    <div className="flex space-x-2">
                                      {Object.entries(mockupData.designSystem.colorPalette || {}).map(([name, color]: [string, any]) => (
                                        <div key={name} className="text-center">
                                          <div
                                            className="w-12 h-12 rounded-lg border-2 border-white shadow-md"
                                            style={{ backgroundColor: color }}
                                          ></div>
                                          <div className="text-xs mt-1 capitalize">{name}</div>
                                        </div>
                                      ))}
                                    </div>
                                  </div>

                                  {/* Typography */}
                                  <div>
                                    <h4 className="font-medium mb-2">Typography</h4>
                                    <div className="space-y-2">
                                      <div><strong>Headings:</strong> {mockupData.designSystem.typography?.headings}</div>
                                      <div><strong>Body:</strong> {mockupData.designSystem.typography?.body}</div>
                                      <div><strong>Style:</strong> {mockupData.designSystem.typography?.style}</div>
                                    </div>
                                  </div>

                                  {/* Layout & Visual Style */}
                                  <div>
                                    <h4 className="font-medium mb-2">Design Approach</h4>
                                    <div className="space-y-2">
                                      <div><strong>Layout:</strong> {mockupData.designSystem.layoutStyle}</div>
                                      <div><strong>Visual Style:</strong> {mockupData.designSystem.visualStyle}</div>
                                    </div>
                                  </div>
                                </div>
                              )}
                            </div>
                          </TabsContent>

                          <TabsContent value="features" className="space-y-4">
                            <div className="bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-700 rounded-xl p-6">
                              <h3 className="text-xl font-semibold mb-4 flex items-center">
                                <Zap className="w-5 h-5 mr-2" />
                                Features & Recommendations
                              </h3>

                              <div className="space-y-4">
                                {/* Features */}
                                <div>
                                  <h4 className="font-medium mb-2">Included Features</h4>
                                  <div className="grid grid-cols-1 gap-2">
                                    {mockupData.features?.map((feature: string, index: number) => (
                                      <div key={index} className="flex items-center space-x-2">
                                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                                        <span className="text-sm">{feature}</span>
                                      </div>
                                    ))}
                                  </div>
                                </div>

                                {/* Technical Recommendations */}
                                {mockupData.technicalRecommendations && (
                                  <div>
                                    <h4 className="font-medium mb-2">Technical Recommendations</h4>
                                    <div className="space-y-2">
                                      {mockupData.technicalRecommendations.map((rec: string, index: number) => (
                                        <div key={index} className="text-sm text-slate-600 dark:text-slate-400">• {rec}</div>
                                      ))}
                                    </div>
                                  </div>
                                )}

                                {/* Content Strategy */}
                                {mockupData.contentStrategy && (
                                  <div>
                                    <h4 className="font-medium mb-2">Content Strategy</h4>
                                    <div className="space-y-2">
                                      <div><strong>Tone:</strong> {mockupData.contentStrategy.tone}</div>
                                      <div><strong>Messaging:</strong> {mockupData.contentStrategy.messaging}</div>
                                      {mockupData.contentStrategy.seoKeywords && (
                                        <div>
                                          <strong>SEO Keywords:</strong>
                                          <div className="flex flex-wrap gap-1 mt-1">
                                            {mockupData.contentStrategy.seoKeywords.map((keyword: string, index: number) => (
                                              <Badge key={index} variant="secondary" className="text-xs">{keyword}</Badge>
                                            ))}
                                          </div>
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                )}
                              </div>
                            </div>
                          </TabsContent>
                        </Tabs>

                        {/* Quote Section */}
                        <div className="bg-gradient-to-br from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-xl p-6">
                          <h3 className="text-xl font-semibold mb-4 flex items-center">
                            <DollarSign className="w-5 h-5 mr-2" />
                            Professional Quote
                          </h3>

                          {quote ? (
                            <div className="space-y-4">
                              <div className="text-3xl font-bold text-green-600 dark:text-green-400">
                                ${quote.pricing?.totalCost?.toLocaleString() || 'Contact for pricing'}
                              </div>
                              
                              {quote.pricing && (
                                <div className="space-y-2">
                                  <div className="flex justify-between">
                                    <span>Design Cost:</span>
                                    <span>${quote.pricing.designCost?.toLocaleString()}</span>
                                  </div>
                                  <div className="flex justify-between">
                                    <span>Development Cost:</span>
                                    <span>${quote.pricing.developmentCost?.toLocaleString()}</span>
                                  </div>
                                  <div className="flex justify-between">
                                    <span>Features Cost:</span>
                                    <span>${quote.pricing.featuresCost?.toLocaleString()}</span>
                                  </div>
                                </div>
                              )}

                              {quote.timeline && (
                                <div className="flex items-center space-x-2">
                                  <Clock className="w-4 h-4" />
                                  <span><strong>Timeline:</strong> {quote.timeline.total}</span>
                                </div>
                              )}

                              {quote.breakdown && (
                                <div className="space-y-2">
                                  <h4 className="font-medium">Project Breakdown:</h4>
                                  {quote.breakdown.map((phase: any, index: number) => (
                                    <div key={index} className="flex justify-between text-sm">
                                      <span>{phase.phase} ({phase.duration})</span>
                                      <span>${phase.cost?.toLocaleString()}</span>
                                    </div>
                                  ))}
                                </div>
                              )}

                              <div className="pt-4 border-t">
                                <Button className="w-full bg-green-600 hover:bg-green-700">
                                  <DollarSign className="w-4 h-4 mr-2" />
                                  Get Started with This Quote
                                </Button>
                              </div>
                            </div>
                          ) : (
                            <Button
                              onClick={generateQuote}
                              disabled={quoteLoading}
                              className="w-full bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700"
                            >
                              {quoteLoading ? (
                                <>
                                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                                  AI is Calculating...
                                </>
                              ) : (
                                <>
                                  <DollarSign className="w-4 h-4 mr-2" />
                                  Generate Professional Quote
                                </>
                              )}
                            </Button>
                          )}
                        </div>
                      </div>
                    ) : (
                      <div className="bg-slate-50 dark:bg-slate-800 rounded-xl p-12 text-center">
                        <Wand2 className="w-16 h-16 mx-auto mb-4 text-slate-400" />
                        <h3 className="text-xl font-semibold mb-2">Ready to Generate</h3>
                        <p className="text-slate-600 dark:text-slate-400">
                          Fill in your company details and click "Generate AI Mockup" to see your professional website design powered by Google Gemini 2.0
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        </motion.div>

        {/* Features Grid */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8, delay: 0.2 }}
          className="grid grid-cols-1 md:grid-cols-3 gap-8"
        >
          <Card className="bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm border-0 shadow-lg">
            <CardContent className="p-8 text-center">
              <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-blue-500 rounded-full flex items-center justify-center mx-auto mb-4">
                <Sparkles className="w-8 h-8 text-white" />
              </div>
              <h3 className="text-xl font-semibold mb-3">Google Gemini 2.0 Powered</h3>
              <p className="text-slate-600 dark:text-slate-400">
                Cutting-edge AI analyzes your business and creates sophisticated, industry-specific website mockups with professional design systems
              </p>
            </CardContent>
          </Card>

          <Card className="bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm border-0 shadow-lg">
            <CardContent className="p-8 text-center">
              <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-teal-500 rounded-full flex items-center justify-center mx-auto mb-4">
                <Eye className="w-8 h-8 text-white" />
              </div>
              <h3 className="text-xl font-semibold mb-3">Advanced Visual Preview</h3>
              <p className="text-slate-600 dark:text-slate-400">
                See detailed mockups with custom color palettes, typography, layout concepts, and comprehensive design systems tailored to your brand
              </p>
            </CardContent>
          </Card>

          <Card className="bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm border-0 shadow-lg">
            <CardContent className="p-8 text-center">
              <div className="w-16 h-16 bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center mx-auto mb-4">
                <DollarSign className="w-8 h-8 text-white" />
              </div>
              <h3 className="text-xl font-semibold mb-3">Intelligent Pricing</h3>
              <p className="text-slate-600 dark:text-slate-400">
                Get accurate, detailed development quotes with project breakdowns, timelines, and professional recommendations based on current market rates
              </p>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </section>
  )
}